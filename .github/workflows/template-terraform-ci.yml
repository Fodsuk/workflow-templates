on:
  workflow_call:
    inputs:
      # terraform
      TERRAFORM_VERSION:
        type: string
      TERRAFORM_DIRECTORY:
        type: string
        default: src
       # environment
      ENVIRONMENT:
        type: string
      # fixtures
      HAS_FIXTURES:
        type: boolean
        default: true
      FIXTURE_DIRECTORY:
        type: string
        default: fixtures
      # hiera
      HAS_HIERA:
        type: boolean
        default: true
      HIERA_DIRECTORY:
        type: string
        default: hiera
      # testing
      HAS_TESTS:
        type: boolean
        default: true
      TEST_DIRECTORY:
        type: string
        default: spec
      PESTER_VERSION:
        type: string
        default: 5.3.3
    secrets:
      HIERA_FACTS:
        required: false
      CLIENT_ID:
        required: true
      CLIENT_SECRET:
        required: true
      SUBSCRIPTION_ID:
        required: true
      TENANT_ID:
        required: true
jobs:
  terraform-build-and-test:
    name: Continuous Integration
    environment: ${{ inputs.ENVIRONMENT }}
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: pwsh
        working-directory: ${{ inputs.TERRAFORM_DIRECTORY }}
    env:
      ARM_CLIENT_ID: "${{ secrets.CLIENT_ID }}"
      ARM_CLIENT_SECRET: "${{ secrets.CLIENT_SECRET }}"
      ARM_SUBSCRIPTION_ID: "${{ secrets.SUBSCRIPTION_ID }}"
      ARM_TENANT_ID: "${{ secrets.TENANT_ID }}"
    steps:
      - name: Az login
        uses: azure/login@v1
        with:
          creds: '{"clientId":"${{ secrets.CLIENT_ID }}","clientSecret":"${{ secrets.CLIENT_SECRET }}","subscriptionId":"${{ secrets.SUBSCRIPTION_ID }}","tenantId":"${{ secrets.TENANT_ID }}"}'
      - name: checkout
        uses: actions/checkout@v3
      - name: Install Terraform ${{ inputs.TERRAFORM_VERSION }}
        id: install_terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.TERRAFORM_VERSION }}
          terraform_wrapper: false
      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validation
        id: validate
        run: terraform validate
      - name: Create Fixtures
        if: ${{ inputs.HAS_FIXTURES }}
        id: create_fixtures
        continue-on-error: true
        run: |
          terraform init
          terraform apply --auto-approve
        working-directory: ${{ inputs.FIXTURE_DIRECTORY }}
      - name: Create fixture.auto.tfvars for terraform
        if: ${{ inputs.HAS_FIXTURES }}
        id: create_fixture_tfvars
        continue-on-error: true
        run: |
          Write-Host "Create fixture.auto.tfvars, terraform can use the output as inputs"
          terraform output > ${{github.workspace}}/${{ inputs.TERRAFORM_DIRECTORY }}/fixture.auto.tfvars
        working-directory: ${{ inputs.FIXTURE_DIRECTORY }}
      - name: Create fixture_outputs.json for hiera
        if: ${{ inputs.HAS_FIXTURES }} && ${{ inputs.HAS_HIERA }}
        id: create_fixture_json_for_hiera
        continue-on-error: true
        run: |
          Write-Host "Create fixture_outputs.json, hiera can use the output as inputs"
          terraform output -json | jq 'with_entries(.value |= .value)' > ${{github.workspace}}/${{ inputs.HIERA_DIRECTORY }}/data/fixture_outputs.json
        working-directory: ${{ inputs.FIXTURE_DIRECTORY }}
      - name: Download & Build Hiera
        if: ${{ inputs.HAS_HIERA }}
        id: download_and_build_hiera
        continue-on-error: true
        run: |
          git clone https://github.com/lyraproj/hiera hiera_code
          Push-Location hiera_code/lookup
          go build
          Copy-Item lookup -Destination ${{github.workspace}}/${{ inputs.HIERA_DIRECTORY }} 
          Pop-Location
        working-directory: ${{ inputs.HIERA_DIRECTORY }}
      - name: Generate hiera.auto.tfvars.json from Hiera
        if: ${{ inputs.HAS_HIERA }}
        id: generate_tfvar_from_hiera
        continue-on-error: true
        run: |
          Push-Location ${{github.workspace}}/${{ inputs.TERRAFORM_DIRECTORY }}
          $terraform_variables = Select-String -Pattern "variable \""(?'variable_name'[a-zA-Z_]+)\"" {" -Path *.tf
          Pop-Location

          if ("${{ secrets.HIERA_FACTS }}" -ne "") {
            Set-Content -Path ./facts.yaml -Value "${{ secrets.HIERA_FACTS }}"
          } else {
            Set-Content -Path ./facts.yaml -Value "no_facts_found: true"
          }

          $tf_vars = @{}
          foreach ($terraform_variable_found in $terraform_variables) {
            $terraform_variable_name = ($terraform_variable_found.Matches.Groups | Where-Object { $_.Name -eq "variable_name" }).Value
            Write-Host "Looking up terraform variable $terraform_variable_name in hiera..."
            $variable_value_json = ./lookup $terraform_variable_name --render-as json --facts ./facts.yaml

            if ($null -ne $variable_value_json) {
                  Write-Host "Found a value for variable ($terraform_variable_name) in hiera"
                  $tf_vars[$terraform_variable_name] = ConvertFrom-Json $variable_value_json -Depth 99
            }
          }

          # generate a random environment name to allow resources to be differentiated (when multiple ci builds are running)
          $environment_name = "ci$(-join ((97..122) | Get-Random -Count 5 | % { [char]$_ }))"
          $tf_vars["environment"] = $environment_name
          Write-Host "Added 'environment' parameter ($environment_name)"

          $hiera_tfvars_json = (ConvertTo-Json $tf_vars -Depth 99)
          Set-Content -Path ${{github.workspace}}/${{ inputs.TERRAFORM_DIRECTORY }}/hiera.auto.tfvars.json -Value $hiera_tfvars_json
        working-directory: ${{ inputs.HIERA_DIRECTORY }}
      - name: Terraform Plan
        id: plan_terraform
        continue-on-error: true
        run: |
          terraform plan -detailed-exitcode -out theplan
          if ($LASTEXITCODE -eq 1) { exit 1; }
      - name: Terraform Apply
        id: apply_terraform
        continue-on-error: true
        run: |
          terraform apply theplan --auto-approve

          # generate variables_and_outputs.json (can be used by pester tests)
          terraform plan -json -out="plan.raw"
          terraform show -json plan.raw > variables_and_outputs.json
        # run tests
      - name: Run Tests
        if: ${{ inputs.HAS_TESTS && steps.apply_terraform.outcome == 'success' }}
        id: run_tests
        continue-on-error: true
        run: |
          Import-Module Pester -RequiredVersion ${{ inputs.PESTER_VERSION }}
          $pester_config = [PesterConfiguration]::Default
          $pester_config.Output.Verbosity = "Detailed"
          $pester_config.Filter.Tag = "ci"
          $pester_config.Run.Exit = $true

          Invoke-Pester -Configuration $pester_config
        working-directory: ${{ inputs.TEST_DIRECTORY }}
        # destroy all resources
      - name: Destroy Terraform
        id: destroy_terraform
        continue-on-error: true
        run: |
          terraform apply -destroy --auto-approve
      - name: Destroy Fixtures
        if: ${{ inputs.HAS_FIXTURES }}
        id: destroy_fixtures
        continue-on-error: true
        run: |
          terraform apply -destroy --auto-approve
        working-directory: ${{ inputs.FIXTURE_DIRECTORY }}
      - name: validation
        run: |

          $steps_json = 
          @"
            ${{ toJSON(steps) }}
          "@

          $steps = ConvertFrom-Json $steps_json -depth 10 -AsHashtable

          echo '|  action   |   outcome  |      |' >> $ENV:GITHUB_STEP_SUMMARY
          echo '|-----------|------------|:----:|' >> $ENV:GITHUB_STEP_SUMMARY

          foreach($e in $steps.GetEnumerator()) {
             $action_name = $e.Key
             $action_outcome = $e.Value.outcome
             $emoji = ($action_outcome -eq "success" ? ":heavy_check_mark:" : ($action_outcome -eq "failure" ? ":x:" : ":next_track_button:"  ))
             echo "|$action_name|$action_outcome|$emoji" >> $ENV:GITHUB_STEP_SUMMARY
          }

          if ($${{ contains(steps.*.outcome, 'failure') }}) { throw; }

